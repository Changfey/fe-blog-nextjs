import Head from "next/head";
import { ApolloClient, InMemoryCache } from "@apollo/client";
import { GET_POST_BY_CATEGORY, Post } from "../graphql/queries";
import Link from "next/link";

export const client = new ApolloClient({
    uri: "http://3.27.181.46:1337/graphql",
    cache: new InMemoryCache(),
});

type HomeProps = {
    codingPosts: Post[],
    lifePosts: Post[],
}

export default function Home({ codingPosts, lifePosts }: HomeProps) {
    return <div>
        <Head>
            <title>My blog</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href=""></link>
        </Head>
        {/* <h1>Welcome to the Fei's Blog</h1> */}
        {/* <p>This blog is mainly about my daily life and share things like coding and reading.</p> */}
        <br />
        <h2>Coding</h2>
        <ul>
            {
                codingPosts?.map((post) => <li key={post.attributes.title}>
                    <Link href={`/blog/${post.attributes.urlSlug}`}>
                        <h3>{post.attributes.title}</h3>
                        <p>{post.attributes.description}</p>
                    </Link>
                </li>)
            }
        </ul>
        <h2>Life & Reading</h2>
        <ul>
            {
                lifePosts?.map((post) => <li key={post.attributes.title}>
                    <Link href={`/blog/${post.attributes.urlSlug}`}>
                        <h3>{post.attributes.title}</h3>
                        <p>{post.attributes.description}</p>
                    </Link>
                </li>)
            }
        </ul>
    </div>
}


export async function getStaticProps() {
    try {
        const data = await Promise.all([client.query({
            query: GET_POST_BY_CATEGORY,
            variables: { category: 'coding' },
        }), client.query({
            query: GET_POST_BY_CATEGORY,
            variables: { category: 'life' },
        })])

        return {
            props: {
                codingPosts: data[0].data.blogPosts.data,
                lifePosts: data[1].data.blogPosts.data
            },

        }
    } catch (error) {
        console.log('error!!!!!', error)
        return {
            props: {
                posts: []
            }
        };
    }

}